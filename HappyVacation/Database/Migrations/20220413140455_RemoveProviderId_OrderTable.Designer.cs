// <auto-generated />
using System;
using HappyVacation.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HappyVacation.Database.Migrations
{
    [DbContext(typeof(MyDbContext))]
    [Migration("20220413140455_RemoveProviderId_OrderTable")]
    partial class RemoveProviderId_OrderTable
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("HappyVacation.Database.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("Categories", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryName = "adventure tour"
                        },
                        new
                        {
                            Id = 2,
                            CategoryName = "artistic tour"
                        },
                        new
                        {
                            Id = 3,
                            CategoryName = "beach tour"
                        },
                        new
                        {
                            Id = 4,
                            CategoryName = "biking tour"
                        },
                        new
                        {
                            Id = 5,
                            CategoryName = "boating tour"
                        },
                        new
                        {
                            Id = 6,
                            CategoryName = "camping"
                        },
                        new
                        {
                            Id = 7,
                            CategoryName = "classic tour"
                        },
                        new
                        {
                            Id = 8,
                            CategoryName = "cooking tour"
                        },
                        new
                        {
                            Id = 9,
                            CategoryName = "craft tour"
                        },
                        new
                        {
                            Id = 10,
                            CategoryName = "cruises tour"
                        },
                        new
                        {
                            Id = 11,
                            CategoryName = "culinary tour"
                        },
                        new
                        {
                            Id = 12,
                            CategoryName = "cultural tour"
                        },
                        new
                        {
                            Id = 13,
                            CategoryName = "discovery tour"
                        },
                        new
                        {
                            Id = 14,
                            CategoryName = "fishing tour"
                        },
                        new
                        {
                            Id = 15,
                            CategoryName = "heritage tour"
                        },
                        new
                        {
                            Id = 16,
                            CategoryName = "historical tour"
                        },
                        new
                        {
                            Id = 17,
                            CategoryName = "homestay tour"
                        },
                        new
                        {
                            Id = 18,
                            CategoryName = "honeymoon  tour"
                        },
                        new
                        {
                            Id = 19,
                            CategoryName = "luxury tour"
                        },
                        new
                        {
                            Id = 20,
                            CategoryName = "'motorcycle  tour"
                        },
                        new
                        {
                            Id = 21,
                            CategoryName = "nature-based tour"
                        },
                        new
                        {
                            Id = 23,
                            CategoryName = "relaxing tour"
                        },
                        new
                        {
                            Id = 24,
                            CategoryName = "shopping tour"
                        },
                        new
                        {
                            Id = 25,
                            CategoryName = "snorkeling tour"
                        },
                        new
                        {
                            Id = 26,
                            CategoryName = "sports tour"
                        },
                        new
                        {
                            Id = 27,
                            CategoryName = "trekking  tour"
                        },
                        new
                        {
                            Id = 28,
                            CategoryName = "walking  tour"
                        });
                });

            modelBuilder.Entity("HappyVacation.Database.Entities.Expense", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsIncluded")
                        .HasColumnType("bit");

                    b.Property<int>("TourId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TourId");

                    b.ToTable("Expenses", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Content = "Hotel pickup and drop-off in Hoi An City Center",
                            IsIncluded = true,
                            TourId = 1
                        },
                        new
                        {
                            Id = 2,
                            Content = "Transportation with air-conditioning",
                            IsIncluded = true,
                            TourId = 1
                        },
                        new
                        {
                            Id = 3,
                            Content = "Bicycle",
                            IsIncluded = true,
                            TourId = 1
                        },
                        new
                        {
                            Id = 4,
                            Content = "Entrance fees",
                            IsIncluded = true,
                            TourId = 1
                        },
                        new
                        {
                            Id = 5,
                            Content = "Foods and Bottled drinking water",
                            IsIncluded = true,
                            TourId = 1
                        },
                        new
                        {
                            Id = 6,
                            Content = "Tips and gratuities",
                            IsIncluded = false,
                            TourId = 1
                        },
                        new
                        {
                            Id = 7,
                            Content = "Personal expenses such as: shopping, telephone, beverage, etc.",
                            IsIncluded = false,
                            TourId = 1
                        },
                        new
                        {
                            Id = 8,
                            Content = "Hotel pickup and drop-off in Hoi An City Center",
                            IsIncluded = true,
                            TourId = 2
                        },
                        new
                        {
                            Id = 9,
                            Content = "Transportation with air-conditioning",
                            IsIncluded = true,
                            TourId = 2
                        },
                        new
                        {
                            Id = 10,
                            Content = "Boat",
                            IsIncluded = true,
                            TourId = 2
                        },
                        new
                        {
                            Id = 11,
                            Content = "Entrance fees",
                            IsIncluded = true,
                            TourId = 2
                        },
                        new
                        {
                            Id = 12,
                            Content = "Dinner",
                            IsIncluded = true,
                            TourId = 2
                        },
                        new
                        {
                            Id = 13,
                            Content = "English-speaking tour guide",
                            IsIncluded = true,
                            TourId = 2
                        },
                        new
                        {
                            Id = 14,
                            Content = "Tips and gratuities",
                            IsIncluded = false,
                            TourId = 2
                        },
                        new
                        {
                            Id = 15,
                            Content = "Personal expenses such as: shopping, telephone, beverage, etc.",
                            IsIncluded = false,
                            TourId = 2
                        });
                });

            modelBuilder.Entity("HappyVacation.Database.Entities.Itinerary", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("TourId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TourId");

                    b.ToTable("Itineraries", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Content = "Discover Hoi An’s countryside and its local foods by bicycle. Local foods in Hoi An are known and enjoyed by the tourists once setting foot here. In Hoi An, these cuisines are very popular and sold everywhere in all streets. Moreover, these cuisines are considered as unique symbols for the culture and introduced to every tourist. We bike through the countryside to a Tra Que Village.",
                            Title = "Part 1",
                            TourId = 1
                        },
                        new
                        {
                            Id = 2,
                            Content = "Vegetables from this village are distributed to most of the restaurants in town and specially make the Cao Lau to have a perfect taste. Go back to town and learn how to make special “white rose” dumpling cakes with a local family and taste your products.",
                            Title = "Part 2",
                            TourId = 1
                        },
                        new
                        {
                            Id = 3,
                            Content = "Continue riding to Cam Nam to enjoy the Yin and Yang food such as: Banh Dap (“cracked or smashed rice pancake”), Che Bap (“corn and coconut sweet soup”). We then ride to a famous local restaurant for Hoi An specialty - Cao Lau. Cao Lau is a traditional Hoi An specialty composed of local noodles, pork, fresh vegetables and rice paper.",
                            Title = "Part 3",
                            TourId = 1
                        },
                        new
                        {
                            Id = 4,
                            Content = "We will ride back to the company at the end of our trip.",
                            Title = "Part 4",
                            TourId = 1
                        },
                        new
                        {
                            Id = 5,
                            Content = "We will visit the Japanese Covered Bridge - one of Vietnam's most iconic attraction and a beautiful historical piece of Japanese architecture. Walking in the ancient streets at night, you can perceive the ancient beauty of Hoi An City.",
                            Title = "Part 1",
                            TourId = 2
                        },
                        new
                        {
                            Id = 6,
                            Content = "We will visit one of Hoi An Museums and an Ancient House which boast a remarkable architectural style and rest under the glistening lantern lights.",
                            Title = "Part 2",
                            TourId = 2
                        },
                        new
                        {
                            Id = 7,
                            Content = "Enjoy Bai Choi performance by the bank of Hoai river. Bai Choi combines music, poetry, acting, painting and literature, has been recognized by UNESCO as an intangible heritage of humanity.",
                            Title = "Part 3",
                            TourId = 2
                        },
                        new
                        {
                            Id = 8,
                            Content = "Have dinner at a restaurant with romantic river view then ake a 15-minute boat trip on Hoai River lighting and floating your own candle lit coloured paper lantern on the river with wishes and go shopping at Hoi An night market.",
                            Title = "Part 4",
                            TourId = 2
                        });
                });

            modelBuilder.Entity("HappyVacation.Database.Entities.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Adults")
                        .HasColumnType("int");

                    b.Property<string>("CancelReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Children")
                        .HasColumnType("int");

                    b.Property<DateTime>("DepartureDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("TourId")
                        .HasColumnType("int");

                    b.Property<string>("TouristEmail")
                        .IsRequired()
                        .HasMaxLength(62)
                        .HasColumnType("nvarchar(62)");

                    b.Property<string>("TouristName")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("TouristPhone")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TourId");

                    b.HasIndex("UserId");

                    b.ToTable("Orders", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Adults = 2,
                            Children = 1,
                            DepartureDate = new DateTime(2022, 3, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OrderDate = new DateTime(2022, 3, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            State = "Confirmed",
                            TourId = 1,
                            TouristEmail = "braddinh1952000@gmail.com",
                            TouristName = "Dinh Cong Tai",
                            TouristPhone = "0945501905",
                            UserId = 3
                        },
                        new
                        {
                            Id = 2,
                            Adults = 2,
                            Children = 0,
                            DepartureDate = new DateTime(2022, 3, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OrderDate = new DateTime(2022, 3, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            State = "Confirmed",
                            TourId = 2,
                            TouristEmail = "braddinh1952000@gmail.com",
                            TouristName = "Dinh Cong Tai",
                            TouristPhone = "0945501905",
                            UserId = 3
                        });
                });

            modelBuilder.Entity("HappyVacation.Database.Entities.Place", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("IsTop")
                        .HasColumnType("bit");

                    b.Property<string>("PlaceName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("ThumbnailUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Places", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsTop = true,
                            PlaceName = "Da Nang",
                            ThumbnailUrl = "/storage/danang.jpg"
                        },
                        new
                        {
                            Id = 2,
                            IsTop = true,
                            PlaceName = "Hue",
                            ThumbnailUrl = "/storage/hue.jpg"
                        },
                        new
                        {
                            Id = 3,
                            IsTop = true,
                            PlaceName = "Hoi An",
                            ThumbnailUrl = "/storage/hoian.jpg"
                        },
                        new
                        {
                            Id = 4,
                            IsTop = false,
                            PlaceName = "Ha Long",
                            ThumbnailUrl = "/storage/halong.jpg"
                        },
                        new
                        {
                            Id = 5,
                            IsTop = true,
                            PlaceName = "Ha Noi",
                            ThumbnailUrl = "/storage/hanoi.jpg"
                        },
                        new
                        {
                            Id = 6,
                            IsTop = true,
                            PlaceName = "Ho Chi Minh",
                            ThumbnailUrl = "/storage/hochiminh.jpg"
                        },
                        new
                        {
                            Id = 7,
                            IsTop = false,
                            PlaceName = "Da Lat",
                            ThumbnailUrl = "/storage/dalat.jpg"
                        },
                        new
                        {
                            Id = 8,
                            IsTop = true,
                            PlaceName = "Nha Trang",
                            ThumbnailUrl = "/storage/nhatrang.jpg"
                        },
                        new
                        {
                            Id = 9,
                            IsTop = false,
                            PlaceName = "Phu Quoc",
                            ThumbnailUrl = "/storage/phuquoc.jpg"
                        },
                        new
                        {
                            Id = 10,
                            IsTop = false,
                            PlaceName = "Quy Nhon",
                            ThumbnailUrl = "/storage/quynhon.jpg"
                        },
                        new
                        {
                            Id = 11,
                            IsTop = false,
                            PlaceName = "Sa Pa",
                            ThumbnailUrl = "/storage/sapa.jpg"
                        },
                        new
                        {
                            Id = 12,
                            IsTop = false,
                            PlaceName = "Vung Tau",
                            ThumbnailUrl = "/storage/vungtau.jpg"
                        },
                        new
                        {
                            Id = 13,
                            IsTop = false,
                            PlaceName = "Mui Ne",
                            ThumbnailUrl = "/storage/muine.jpg"
                        },
                        new
                        {
                            Id = 14,
                            IsTop = false,
                            PlaceName = "Con Dao",
                            ThumbnailUrl = "/storage/condao.jpg"
                        },
                        new
                        {
                            Id = 15,
                            IsTop = false,
                            PlaceName = "Trang An",
                            ThumbnailUrl = "/storage/trangan.jpg"
                        });
                });

            modelBuilder.Entity("HappyVacation.Database.Entities.Provider", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("AvatarUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("ProviderEmail")
                        .IsRequired()
                        .HasMaxLength(62)
                        .HasColumnType("nvarchar(62)");

                    b.Property<string>("ProviderName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ProviderPhone")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.HasKey("Id");

                    b.ToTable("Providers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "32 Tien Giang St, Tan Binh District, Ho Chi Minh City, Viet Nam",
                            AvatarUrl = "/storage/hoianexpresslogo.jpg",
                            DateCreated = new DateTime(2022, 3, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Established in 2002, Hoi An Express is a company specializing in organizing professional tours for foreign visitors to Vietnam to visit tours, conferences, events combined with team building.",
                            IsEnabled = true,
                            ProviderEmail = "info@hoianexpress.com.vn",
                            ProviderName = "Hoi An Express",
                            ProviderPhone = "0905123456"
                        });
                });

            modelBuilder.Entity("HappyVacation.Database.Entities.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<float>("Rating")
                        .HasColumnType("real");

                    b.Property<int>("TourId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TourId");

                    b.HasIndex("UserId");

                    b.ToTable("Reviews", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Content = "This is a good tour! A lot of interesting experiences.",
                            DateCreated = new DateTime(2022, 3, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateModified = new DateTime(2022, 3, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Rating = 4f,
                            TourId = 1,
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            Content = "I love it! Had a really relaxing time.",
                            DateCreated = new DateTime(2022, 4, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateModified = new DateTime(2022, 4, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Rating = 4f,
                            TourId = 1,
                            UserId = 1
                        });
                });

            modelBuilder.Entity("HappyVacation.Database.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("Roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            RoleName = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            RoleName = "Provider"
                        },
                        new
                        {
                            Id = 3,
                            RoleName = "Tourist"
                        });
                });

            modelBuilder.Entity("HappyVacation.Database.Entities.Tour", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Destination")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<float>("Duration")
                        .HasColumnType("real");

                    b.Property<int>("GroupSize")
                        .HasColumnType("int");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPrivate")
                        .HasColumnType("bit");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("MinAdults")
                        .HasColumnType("int");

                    b.Property<string>("Overview")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PricePerAdult")
                        .HasColumnType("int");

                    b.Property<int>("PricePerChild")
                        .HasColumnType("int");

                    b.Property<int>("ProviderId")
                        .HasColumnType("int");

                    b.Property<string>("TourName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("ViewCount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProviderId");

                    b.ToTable("Tours", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Destination = "Cam Chau Ward, Hoi An City, Quang Nam Province",
                            Duration = 0.5f,
                            GroupSize = 15,
                            IsAvailable = true,
                            IsPrivate = false,
                            Location = "Minh An Ward, Hoi An City, Quang Nam Province",
                            MinAdults = 2,
                            Overview = "Take a journey through Hoi An’s culinary history; head out to the beautiful countryside by bicycle to experience some traditional local food favorites, including the most famous of Hoi An specialties; Cao Lau. Try the traditional Hoi An specialty, Cao Lau; intoxicating pork noodle broth, featuring sticky rice noodles that must be soaked in water from the oldest well in Hoi An, Ba Le Well.",
                            PricePerAdult = 89,
                            PricePerChild = 30,
                            ProviderId = 1,
                            TourName = "HALF-DAY FOODIE TOUR BY BICYCLE & VISIT TRA QUE VEGETABLE VILLAGE",
                            ViewCount = 10
                        },
                        new
                        {
                            Id = 2,
                            Destination = "Minh An Ward, Hoi An City, Quang Nam Province",
                            Duration = 0.125f,
                            GroupSize = 15,
                            IsAvailable = true,
                            IsPrivate = true,
                            Location = "Minh An Ward, Hoi An City, Quang Nam Province",
                            MinAdults = 1,
                            Overview = "Have a memorable end to your day in Hoi An with a tour of the ancient town after the sun goes down. See the centuries-old houses and monuments illuminated by local lanterns. Visit a traditional restaurant for dinner",
                            PricePerAdult = 180,
                            PricePerChild = 50,
                            ProviderId = 1,
                            TourName = "Private Tour: HOI AN MYSTERIOUS NIGHT TOUR WITH DINNER FROM HOI AN",
                            ViewCount = 5
                        });
                });

            modelBuilder.Entity("HappyVacation.Database.Entities.TourCategory", b =>
                {
                    b.Property<int>("TourId")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.HasKey("TourId", "CategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("TourCategories", (string)null);

                    b.HasData(
                        new
                        {
                            TourId = 1,
                            CategoryId = 4
                        },
                        new
                        {
                            TourId = 1,
                            CategoryId = 7
                        },
                        new
                        {
                            TourId = 1,
                            CategoryId = 8
                        },
                        new
                        {
                            TourId = 1,
                            CategoryId = 11
                        },
                        new
                        {
                            TourId = 2,
                            CategoryId = 11
                        },
                        new
                        {
                            TourId = 2,
                            CategoryId = 12
                        });
                });

            modelBuilder.Entity("HappyVacation.Database.Entities.TourImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("TourId")
                        .HasColumnType("int");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("TourId");

                    b.ToTable("TourImages", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            TourId = 1,
                            Url = "/storage/tour11.jpg"
                        },
                        new
                        {
                            Id = 2,
                            TourId = 1,
                            Url = "/storage/tour12.jpg"
                        },
                        new
                        {
                            Id = 3,
                            TourId = 1,
                            Url = "/storage/tour13.jpg"
                        },
                        new
                        {
                            Id = 4,
                            TourId = 1,
                            Url = "/storage/tour14.jpg"
                        },
                        new
                        {
                            Id = 5,
                            TourId = 2,
                            Url = "/storage/tour21.jpg"
                        },
                        new
                        {
                            Id = 6,
                            TourId = 2,
                            Url = "/storage/tour22.jpg"
                        },
                        new
                        {
                            Id = 7,
                            TourId = 2,
                            Url = "/storage/tour23.jpg"
                        },
                        new
                        {
                            Id = 8,
                            TourId = 2,
                            Url = "/storage/tour24.jpg"
                        });
                });

            modelBuilder.Entity("HappyVacation.Database.Entities.TourPlace", b =>
                {
                    b.Property<int>("TourId")
                        .HasColumnType("int");

                    b.Property<int>("PlaceId")
                        .HasColumnType("int");

                    b.HasKey("TourId", "PlaceId");

                    b.HasIndex("PlaceId");

                    b.ToTable("TourPlaces", (string)null);

                    b.HasData(
                        new
                        {
                            TourId = 1,
                            PlaceId = 3
                        },
                        new
                        {
                            TourId = 2,
                            PlaceId = 3
                        });
                });

            modelBuilder.Entity("HappyVacation.Database.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AvatarUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(62)
                        .HasColumnType("nvarchar(62)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<int?>("ProviderId")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.HasIndex("ProviderId")
                        .IsUnique()
                        .HasFilter("[ProviderId] IS NOT NULL");

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "ngoluuquocdat@gmail.com",
                            FirstName = "Quoc Dat",
                            IsEnabled = true,
                            LastName = "Ngo Luu",
                            PasswordHash = new byte[] { 32, 197, 139, 39, 149, 108, 151, 239, 80, 17, 63, 44, 248, 99, 30, 251, 25, 234, 211, 201, 147, 194, 116, 163, 149, 233, 67, 246, 220, 93, 239, 191, 90, 137, 10, 198, 35, 91, 116, 65, 184, 30, 76, 227, 54, 116, 124, 222, 89, 206, 205, 77, 172, 213, 225, 235, 113, 221, 163, 109, 129, 54, 165, 176 },
                            PasswordSalt = new byte[] { 243, 46, 255, 1, 96, 153, 106, 132, 76, 223, 64, 229, 24, 64, 89, 125, 142, 151, 162, 222, 42, 178, 180, 94, 172, 67, 39, 53, 3, 188, 59, 170, 40, 212, 88, 148, 226, 252, 254, 65, 62, 87, 74, 22, 245, 218, 81, 155, 68, 135, 4, 47, 194, 243, 155, 69, 72, 70, 27, 181, 88, 20, 240, 86, 138, 166, 186, 36, 10, 132, 119, 16, 6, 163, 174, 69, 160, 76, 254, 87, 39, 219, 129, 213, 243, 19, 79, 38, 47, 56, 88, 78, 182, 242, 70, 187, 68, 243, 2, 212, 22, 226, 142, 140, 196, 217, 195, 157, 43, 170, 211, 11, 50, 97, 14, 248, 137, 160, 26, 81, 117, 120, 213, 152, 189, 188, 226, 58 },
                            Phone = "0905553859",
                            Username = "admin"
                        },
                        new
                        {
                            Id = 2,
                            AvatarUrl = "/storage/tuan.jpg",
                            Email = "tuandang29042000@gmail.com",
                            FirstName = "Quoc Tuan",
                            IsEnabled = true,
                            LastName = "Dang",
                            PasswordHash = new byte[] { 219, 64, 152, 183, 212, 241, 31, 151, 227, 215, 248, 230, 88, 106, 74, 45, 14, 229, 72, 178, 102, 57, 185, 218, 143, 202, 106, 189, 177, 58, 145, 245, 48, 95, 198, 190, 160, 114, 254, 92, 100, 242, 10, 252, 140, 164, 18, 32, 202, 46, 147, 212, 73, 240, 218, 52, 16, 206, 145, 4, 211, 128, 48, 36 },
                            PasswordSalt = new byte[] { 243, 46, 255, 1, 96, 153, 106, 132, 76, 223, 64, 229, 24, 64, 89, 125, 142, 151, 162, 222, 42, 178, 180, 94, 172, 67, 39, 53, 3, 188, 59, 170, 40, 212, 88, 148, 226, 252, 254, 65, 62, 87, 74, 22, 245, 218, 81, 155, 68, 135, 4, 47, 194, 243, 155, 69, 72, 70, 27, 181, 88, 20, 240, 86, 138, 166, 186, 36, 10, 132, 119, 16, 6, 163, 174, 69, 160, 76, 254, 87, 39, 219, 129, 213, 243, 19, 79, 38, 47, 56, 88, 78, 182, 242, 70, 187, 68, 243, 2, 212, 22, 226, 142, 140, 196, 217, 195, 157, 43, 170, 211, 11, 50, 97, 14, 248, 137, 160, 26, 81, 117, 120, 213, 152, 189, 188, 226, 58 },
                            Phone = "0921231220",
                            ProviderId = 1,
                            Username = "quoctuan"
                        },
                        new
                        {
                            Id = 3,
                            AvatarUrl = "/storage/tai.jpg",
                            Email = "braddinh1952000@gmail.com",
                            FirstName = "Cong Tai",
                            IsEnabled = true,
                            LastName = "Dinh",
                            PasswordHash = new byte[] { 173, 247, 236, 237, 53, 241, 143, 251, 131, 119, 114, 31, 1, 103, 175, 59, 72, 168, 197, 4, 181, 96, 184, 240, 111, 21, 44, 100, 126, 23, 198, 233, 43, 192, 27, 74, 36, 30, 2, 50, 151, 237, 140, 130, 211, 249, 218, 61, 88, 1, 179, 133, 172, 77, 146, 212, 90, 103, 80, 163, 230, 178, 18, 123 },
                            PasswordSalt = new byte[] { 243, 46, 255, 1, 96, 153, 106, 132, 76, 223, 64, 229, 24, 64, 89, 125, 142, 151, 162, 222, 42, 178, 180, 94, 172, 67, 39, 53, 3, 188, 59, 170, 40, 212, 88, 148, 226, 252, 254, 65, 62, 87, 74, 22, 245, 218, 81, 155, 68, 135, 4, 47, 194, 243, 155, 69, 72, 70, 27, 181, 88, 20, 240, 86, 138, 166, 186, 36, 10, 132, 119, 16, 6, 163, 174, 69, 160, 76, 254, 87, 39, 219, 129, 213, 243, 19, 79, 38, 47, 56, 88, 78, 182, 242, 70, 187, 68, 243, 2, 212, 22, 226, 142, 140, 196, 217, 195, 157, 43, 170, 211, 11, 50, 97, 14, 248, 137, 160, 26, 81, 117, 120, 213, 152, 189, 188, 226, 58 },
                            Phone = "0945501905",
                            Username = "congtai"
                        },
                        new
                        {
                            Id = 4,
                            AvatarUrl = "/storage/dat.jpg",
                            Email = "ngoluuquocdat@gmail.com",
                            FirstName = "Quoc Dat",
                            IsEnabled = true,
                            LastName = "Ngo Luu",
                            PasswordHash = new byte[] { 221, 203, 222, 229, 0, 161, 212, 125, 156, 47, 36, 184, 221, 175, 3, 197, 170, 122, 236, 147, 226, 72, 76, 164, 97, 157, 16, 158, 78, 172, 8, 130, 63, 93, 101, 200, 88, 19, 112, 172, 87, 168, 247, 0, 184, 125, 12, 198, 42, 7, 94, 162, 104, 126, 116, 231, 187, 217, 138, 21, 215, 6, 80, 11 },
                            PasswordSalt = new byte[] { 243, 46, 255, 1, 96, 153, 106, 132, 76, 223, 64, 229, 24, 64, 89, 125, 142, 151, 162, 222, 42, 178, 180, 94, 172, 67, 39, 53, 3, 188, 59, 170, 40, 212, 88, 148, 226, 252, 254, 65, 62, 87, 74, 22, 245, 218, 81, 155, 68, 135, 4, 47, 194, 243, 155, 69, 72, 70, 27, 181, 88, 20, 240, 86, 138, 166, 186, 36, 10, 132, 119, 16, 6, 163, 174, 69, 160, 76, 254, 87, 39, 219, 129, 213, 243, 19, 79, 38, 47, 56, 88, 78, 182, 242, 70, 187, 68, 243, 2, 212, 22, 226, 142, 140, 196, 217, 195, 157, 43, 170, 211, 11, 50, 97, 14, 248, 137, 160, 26, 81, 117, 120, 213, 152, 189, 188, 226, 58 },
                            Phone = "0905553859",
                            Username = "quocdat"
                        });
                });

            modelBuilder.Entity("HappyVacation.Database.Entities.UserRole", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 1,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 1,
                            RoleId = 3
                        },
                        new
                        {
                            UserId = 2,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 2,
                            RoleId = 3
                        },
                        new
                        {
                            UserId = 3,
                            RoleId = 3
                        },
                        new
                        {
                            UserId = 4,
                            RoleId = 3
                        });
                });

            modelBuilder.Entity("HappyVacation.Database.Entities.Expense", b =>
                {
                    b.HasOne("HappyVacation.Database.Entities.Tour", "Tour")
                        .WithMany("Expenses")
                        .HasForeignKey("TourId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tour");
                });

            modelBuilder.Entity("HappyVacation.Database.Entities.Itinerary", b =>
                {
                    b.HasOne("HappyVacation.Database.Entities.Tour", "Tour")
                        .WithMany("Itineraries")
                        .HasForeignKey("TourId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tour");
                });

            modelBuilder.Entity("HappyVacation.Database.Entities.Order", b =>
                {
                    b.HasOne("HappyVacation.Database.Entities.Tour", "Tour")
                        .WithMany("Orders")
                        .HasForeignKey("TourId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("HappyVacation.Database.Entities.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Tour");

                    b.Navigation("User");
                });

            modelBuilder.Entity("HappyVacation.Database.Entities.Review", b =>
                {
                    b.HasOne("HappyVacation.Database.Entities.Tour", "Tour")
                        .WithMany("Reviews")
                        .HasForeignKey("TourId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HappyVacation.Database.Entities.User", "User")
                        .WithMany("Reviews")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Tour");

                    b.Navigation("User");
                });

            modelBuilder.Entity("HappyVacation.Database.Entities.Tour", b =>
                {
                    b.HasOne("HappyVacation.Database.Entities.Provider", "Provider")
                        .WithMany("Tours")
                        .HasForeignKey("ProviderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Provider");
                });

            modelBuilder.Entity("HappyVacation.Database.Entities.TourCategory", b =>
                {
                    b.HasOne("HappyVacation.Database.Entities.Category", "Category")
                        .WithMany("TourCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HappyVacation.Database.Entities.Tour", "Tour")
                        .WithMany("TourCategories")
                        .HasForeignKey("TourId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Tour");
                });

            modelBuilder.Entity("HappyVacation.Database.Entities.TourImage", b =>
                {
                    b.HasOne("HappyVacation.Database.Entities.Tour", "Tour")
                        .WithMany("TourImages")
                        .HasForeignKey("TourId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tour");
                });

            modelBuilder.Entity("HappyVacation.Database.Entities.TourPlace", b =>
                {
                    b.HasOne("HappyVacation.Database.Entities.Place", "Place")
                        .WithMany("TourPlaces")
                        .HasForeignKey("PlaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HappyVacation.Database.Entities.Tour", "Tour")
                        .WithMany("TourPlaces")
                        .HasForeignKey("TourId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Place");

                    b.Navigation("Tour");
                });

            modelBuilder.Entity("HappyVacation.Database.Entities.User", b =>
                {
                    b.HasOne("HappyVacation.Database.Entities.Provider", "Provider")
                        .WithOne("User")
                        .HasForeignKey("HappyVacation.Database.Entities.User", "ProviderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Provider");
                });

            modelBuilder.Entity("HappyVacation.Database.Entities.UserRole", b =>
                {
                    b.HasOne("HappyVacation.Database.Entities.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HappyVacation.Database.Entities.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("HappyVacation.Database.Entities.Category", b =>
                {
                    b.Navigation("TourCategories");
                });

            modelBuilder.Entity("HappyVacation.Database.Entities.Place", b =>
                {
                    b.Navigation("TourPlaces");
                });

            modelBuilder.Entity("HappyVacation.Database.Entities.Provider", b =>
                {
                    b.Navigation("Tours");

                    b.Navigation("User")
                        .IsRequired();
                });

            modelBuilder.Entity("HappyVacation.Database.Entities.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("HappyVacation.Database.Entities.Tour", b =>
                {
                    b.Navigation("Expenses");

                    b.Navigation("Itineraries");

                    b.Navigation("Orders");

                    b.Navigation("Reviews");

                    b.Navigation("TourCategories");

                    b.Navigation("TourImages");

                    b.Navigation("TourPlaces");
                });

            modelBuilder.Entity("HappyVacation.Database.Entities.User", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("Reviews");

                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
