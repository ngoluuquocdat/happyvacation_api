// <auto-generated />
using System;
using HappyVacation.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HappyVacation.Database.Migrations
{
    [DbContext(typeof(MyDbContext))]
    [Migration("20220504080601_StartPoint_EndPoint_Order_Table")]
    partial class StartPoint_EndPoint_Order_Table
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("HappyVacation.Database.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("Categories", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryName = "adventure tour"
                        },
                        new
                        {
                            Id = 2,
                            CategoryName = "artistic tour"
                        },
                        new
                        {
                            Id = 3,
                            CategoryName = "beach tour"
                        },
                        new
                        {
                            Id = 4,
                            CategoryName = "biking tour"
                        },
                        new
                        {
                            Id = 5,
                            CategoryName = "boating tour"
                        },
                        new
                        {
                            Id = 6,
                            CategoryName = "camping"
                        },
                        new
                        {
                            Id = 7,
                            CategoryName = "classic tour"
                        },
                        new
                        {
                            Id = 8,
                            CategoryName = "cooking tour"
                        },
                        new
                        {
                            Id = 9,
                            CategoryName = "craft tour"
                        },
                        new
                        {
                            Id = 10,
                            CategoryName = "cruises tour"
                        },
                        new
                        {
                            Id = 11,
                            CategoryName = "culinary tour"
                        },
                        new
                        {
                            Id = 12,
                            CategoryName = "cultural tour"
                        },
                        new
                        {
                            Id = 13,
                            CategoryName = "discovery tour"
                        },
                        new
                        {
                            Id = 14,
                            CategoryName = "fishing tour"
                        },
                        new
                        {
                            Id = 15,
                            CategoryName = "heritage tour"
                        },
                        new
                        {
                            Id = 16,
                            CategoryName = "historical tour"
                        },
                        new
                        {
                            Id = 17,
                            CategoryName = "homestay tour"
                        },
                        new
                        {
                            Id = 18,
                            CategoryName = "honeymoon  tour"
                        },
                        new
                        {
                            Id = 19,
                            CategoryName = "luxury tour"
                        },
                        new
                        {
                            Id = 20,
                            CategoryName = "'motorcycle  tour"
                        },
                        new
                        {
                            Id = 21,
                            CategoryName = "nature-based tour"
                        },
                        new
                        {
                            Id = 23,
                            CategoryName = "relaxing tour"
                        },
                        new
                        {
                            Id = 24,
                            CategoryName = "shopping tour"
                        },
                        new
                        {
                            Id = 25,
                            CategoryName = "snorkeling tour"
                        },
                        new
                        {
                            Id = 26,
                            CategoryName = "sports tour"
                        },
                        new
                        {
                            Id = 27,
                            CategoryName = "trekking  tour"
                        },
                        new
                        {
                            Id = 28,
                            CategoryName = "walking  tour"
                        });
                });

            modelBuilder.Entity("HappyVacation.Database.Entities.Expense", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsIncluded")
                        .HasColumnType("bit");

                    b.Property<int>("TourId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TourId");

                    b.ToTable("Expenses", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Content = "Hotel pickup and drop-off in Hoi An City Center",
                            IsIncluded = true,
                            TourId = 1
                        },
                        new
                        {
                            Id = 2,
                            Content = "Transportation with air-conditioning",
                            IsIncluded = true,
                            TourId = 1
                        },
                        new
                        {
                            Id = 3,
                            Content = "Bicycle",
                            IsIncluded = true,
                            TourId = 1
                        },
                        new
                        {
                            Id = 4,
                            Content = "Entrance fees",
                            IsIncluded = true,
                            TourId = 1
                        },
                        new
                        {
                            Id = 5,
                            Content = "Foods and Bottled drinking water",
                            IsIncluded = true,
                            TourId = 1
                        },
                        new
                        {
                            Id = 6,
                            Content = "Tips and gratuities",
                            IsIncluded = false,
                            TourId = 1
                        },
                        new
                        {
                            Id = 7,
                            Content = "Personal expenses such as: shopping, telephone, beverage, etc.",
                            IsIncluded = false,
                            TourId = 1
                        },
                        new
                        {
                            Id = 8,
                            Content = "Hotel pickup and drop-off in Hoi An City Center",
                            IsIncluded = true,
                            TourId = 2
                        },
                        new
                        {
                            Id = 9,
                            Content = "Transportation with air-conditioning",
                            IsIncluded = true,
                            TourId = 2
                        },
                        new
                        {
                            Id = 10,
                            Content = "Boat",
                            IsIncluded = true,
                            TourId = 2
                        },
                        new
                        {
                            Id = 11,
                            Content = "Entrance fees",
                            IsIncluded = true,
                            TourId = 2
                        },
                        new
                        {
                            Id = 12,
                            Content = "Dinner",
                            IsIncluded = true,
                            TourId = 2
                        },
                        new
                        {
                            Id = 13,
                            Content = "English-speaking tour guide",
                            IsIncluded = true,
                            TourId = 2
                        },
                        new
                        {
                            Id = 14,
                            Content = "Tips and gratuities",
                            IsIncluded = false,
                            TourId = 2
                        },
                        new
                        {
                            Id = 15,
                            Content = "Personal expenses such as: shopping, telephone, beverage, etc.",
                            IsIncluded = false,
                            TourId = 2
                        });
                });

            modelBuilder.Entity("HappyVacation.Database.Entities.HotelBooking.Booking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Adults")
                        .HasColumnType("int");

                    b.Property<DateTime>("BookingDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CancelReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CheckIn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CheckOut")
                        .HasColumnType("datetime2");

                    b.Property<int>("Children")
                        .HasColumnType("int");

                    b.Property<string>("CustomerEmail")
                        .IsRequired()
                        .HasMaxLength(62)
                        .HasColumnType("nvarchar(62)");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("CustomerPhone")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<int>("HotelId")
                        .HasColumnType("int");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("HotelId");

                    b.HasIndex("UserId");

                    b.ToTable("Bookings", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Adults = 8,
                            BookingDate = new DateTime(2022, 4, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CheckIn = new DateTime(2022, 4, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CheckOut = new DateTime(2022, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Children = 0,
                            CustomerEmail = "braddinh1952000@gmail.com",
                            CustomerName = "Cong Tai Dinh",
                            CustomerPhone = "0945501905",
                            HotelId = 1,
                            State = "confirmed",
                            UserId = 3
                        },
                        new
                        {
                            Id = 2,
                            Adults = 4,
                            BookingDate = new DateTime(2022, 4, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CheckIn = new DateTime(2022, 4, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CheckOut = new DateTime(2022, 5, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Children = 0,
                            CustomerEmail = "ngoluuquocdat@gmail.com",
                            CustomerName = "Quoc Dat Ngo Luu",
                            CustomerPhone = "0905553859",
                            HotelId = 2,
                            State = "confirmed",
                            UserId = 4
                        });
                });

            modelBuilder.Entity("HappyVacation.Database.Entities.HotelBooking.BookingDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("BookingId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("RoomId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BookingId");

                    b.HasIndex("RoomId");

                    b.ToTable("BookingDetails", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BookingId = 1,
                            Quantity = 2,
                            RoomId = 1
                        },
                        new
                        {
                            Id = 2,
                            BookingId = 1,
                            Quantity = 2,
                            RoomId = 2
                        },
                        new
                        {
                            Id = 3,
                            BookingId = 2,
                            Quantity = 2,
                            RoomId = 3
                        });
                });

            modelBuilder.Entity("HappyVacation.Database.Entities.HotelBooking.Hotel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("CreditCardRequired")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("District")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(62)
                        .HasColumnType("nvarchar(62)");

                    b.Property<bool>("HasBreakfast")
                        .HasColumnType("bit");

                    b.Property<bool>("HasParkingLot")
                        .HasColumnType("bit");

                    b.Property<int>("MinChildAge")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PayInAdvance")
                        .HasColumnType("bit");

                    b.Property<bool>("PetAllowed")
                        .HasColumnType("bit");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<int>("PlaceId")
                        .HasColumnType("int");

                    b.Property<string>("Province")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Stars")
                        .HasColumnType("int");

                    b.Property<string>("Ward")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PlaceId");

                    b.ToTable("Hotels", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "568 Cua Dai",
                            CreditCardRequired = false,
                            Description = "Featuring a free-form outdoor pool and free private parking, Hai Yen Hotel offers budget accommodations with free Wi-Fi and flat-screen TVs. It is centrally located in Hoi An Ancient Town.&Hotel Hai Yen is 2.4 km from well-known Cua Dai Beach.&Large air conditioned rooms at Hai Yen are equipped with a private balcony and seating areas.They are equipped with a safe, electric teakettle and satellite TV.Private bathrooms have a bathtub, toiletries and a hairdryer.&The staff is available at the front desk 24 hours a day and can help with travel arrangements.Guests can purchase gifts at the souvenir shop. Hai Yen Hotel provides shuttle service and currency exchange.&Local dishes, snacks and beverages are offered at Hai Yen’s restaurant.",
                            District = "Hoi An",
                            Email = "sales@haiyenhotel.com.vn",
                            HasBreakfast = true,
                            HasParkingLot = true,
                            MinChildAge = 13,
                            Name = "Hai Yen Hotel",
                            Note = "Please inform Hai Yen Hotel of your expected arrival time in advance. You can use the Special Requests box when booking, or contact the property directly using the contact details in your confirmation.&Guests are required to show a photo ID and credit card upon check-in. Please note that all Special Requests are subject to availability and additional charges may apply.&In the event of an early departure, the property will charge you the full amount for your stay.&Parking is subject to availability due to limited spaces.&",
                            PayInAdvance = false,
                            PetAllowed = false,
                            Phone = "02033969555",
                            PlaceId = 3,
                            Province = "Quang Nam",
                            Stars = 2,
                            Ward = "Cam Chau"
                        },
                        new
                        {
                            Id = 2,
                            Address = "01 Cua Dai",
                            CreditCardRequired = true,
                            Description = "This property is 1 minute walk from the beach. Nestled between Cua Dai Beach and De Vong River, Hoi An Beach Resort features 2 outdoor pools. It provides free Wi-Fi and two-way shuttle services to Hoi An Ancient Town.&Rooms at Resort Hoi An come with private balconies overlooking the garden, river or sea. Each room is equipped with a TV, safety deposit box and tea/coffee making facilities..&Local cooking classes begin with a guided boat trip to Hoi An Market. Waterlily Spa offers Vietnamese massage therapies. Other recreational activities include a game of billiards or a workout in the fitness center..&At River Breeze Restaurant, guests can eat indoors or on the balcony overlooking the river. Snacks and refreshments can be enjoyed at the Sunshine Bar and the beachfront Sands Bar..&Hoi An Beach Resort is a 45-minute drive from Danang International Airport and 2.5 mi from Hoi An’s town center. An airport shuttle is available at extra charge.",
                            District = "Hoi An",
                            Email = "reservation@hoianbeachresort.com.vn",
                            HasBreakfast = true,
                            HasParkingLot = true,
                            MinChildAge = 6,
                            Name = "Hoi An Beach Resort ",
                            Note = "",
                            PayInAdvance = false,
                            PetAllowed = false,
                            Phone = "02353927011",
                            PlaceId = 3,
                            Province = "Quang Nam",
                            Stars = 4,
                            Ward = "Cua Dai"
                        });
                });

            modelBuilder.Entity("HappyVacation.Database.Entities.HotelBooking.Room", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Area")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("HotelId")
                        .HasColumnType("int");

                    b.Property<int>("MaxAdults")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<bool>("SmokingAllowed")
                        .HasColumnType("bit");

                    b.Property<int>("Stock")
                        .HasColumnType("int");

                    b.Property<string>("Views")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("HotelId");

                    b.ToTable("Rooms", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Area = 25,
                            Description = "This double room features a electric kettle, air conditioning and tile/marble floor.&",
                            HotelId = 1,
                            MaxAdults = 2,
                            Name = "Standard Double or Twin Room",
                            Price = 50,
                            SmokingAllowed = false,
                            Stock = 4,
                            Views = "None"
                        },
                        new
                        {
                            Id = 2,
                            Area = 25,
                            Description = "This twin room features a minibar, tile/marble floor and electric kettle.&",
                            HotelId = 1,
                            MaxAdults = 3,
                            Name = "Superior Double or Twin Room",
                            Price = 54,
                            SmokingAllowed = false,
                            Stock = 4,
                            Views = "None"
                        },
                        new
                        {
                            Id = 3,
                            Area = 55,
                            Description = "Located on the ground floor, air-conditioned rooms feature Eastern designs and traditional Vietnamese lanterns. There is a private balcony that leads to the garden. En suite bathroom comes with a bathtub and separate shower facility.&",
                            HotelId = 2,
                            MaxAdults = 2,
                            Name = "Grand Deluxe",
                            Price = 144,
                            SmokingAllowed = false,
                            Stock = 8,
                            Views = "Garden View"
                        });
                });

            modelBuilder.Entity("HappyVacation.Database.Entities.Itinerary", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("TourId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TourId");

                    b.ToTable("Itineraries", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Content = "Discover Hoi An’s countryside and its local foods by bicycle. Local foods in Hoi An are known and enjoyed by the tourists once setting foot here. In Hoi An, these cuisines are very popular and sold everywhere in all streets. Moreover, these cuisines are considered as unique symbols for the culture and introduced to every tourist. We bike through the countryside to a Tra Que Village.",
                            Title = "Part 1",
                            TourId = 1
                        },
                        new
                        {
                            Id = 2,
                            Content = "Vegetables from this village are distributed to most of the restaurants in town and specially make the Cao Lau to have a perfect taste. Go back to town and learn how to make special “white rose” dumpling cakes with a local family and taste your products.",
                            Title = "Part 2",
                            TourId = 1
                        },
                        new
                        {
                            Id = 3,
                            Content = "Continue riding to Cam Nam to enjoy the Yin and Yang food such as: Banh Dap (“cracked or smashed rice pancake”), Che Bap (“corn and coconut sweet soup”). We then ride to a famous local restaurant for Hoi An specialty - Cao Lau. Cao Lau is a traditional Hoi An specialty composed of local noodles, pork, fresh vegetables and rice paper.",
                            Title = "Part 3",
                            TourId = 1
                        },
                        new
                        {
                            Id = 4,
                            Content = "We will ride back to the company at the end of our trip.",
                            Title = "Part 4",
                            TourId = 1
                        },
                        new
                        {
                            Id = 5,
                            Content = "We will visit the Japanese Covered Bridge - one of Vietnam's most iconic attraction and a beautiful historical piece of Japanese architecture. Walking in the ancient streets at night, you can perceive the ancient beauty of Hoi An City.",
                            Title = "Part 1",
                            TourId = 2
                        },
                        new
                        {
                            Id = 6,
                            Content = "We will visit one of Hoi An Museums and an Ancient House which boast a remarkable architectural style and rest under the glistening lantern lights.",
                            Title = "Part 2",
                            TourId = 2
                        },
                        new
                        {
                            Id = 7,
                            Content = "Enjoy Bai Choi performance by the bank of Hoai river. Bai Choi combines music, poetry, acting, painting and literature, has been recognized by UNESCO as an intangible heritage of humanity.",
                            Title = "Part 3",
                            TourId = 2
                        },
                        new
                        {
                            Id = 8,
                            Content = "Have dinner at a restaurant with romantic river view then ake a 15-minute boat trip on Hoai River lighting and floating your own candle lit coloured paper lantern on the river with wishes and go shopping at Hoi An night market.",
                            Title = "Part 4",
                            TourId = 2
                        });
                });

            modelBuilder.Entity("HappyVacation.Database.Entities.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Adults")
                        .HasColumnType("int");

                    b.Property<string>("CancelReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Children")
                        .HasColumnType("int");

                    b.Property<DateTime>("DepartureDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EndPoint")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("StartPoint")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("TourId")
                        .HasColumnType("int");

                    b.Property<string>("TouristEmail")
                        .IsRequired()
                        .HasMaxLength(62)
                        .HasColumnType("nvarchar(62)");

                    b.Property<string>("TouristName")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("TouristPhone")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TourId");

                    b.HasIndex("UserId");

                    b.ToTable("Orders", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Adults = 2,
                            Children = 1,
                            DepartureDate = new DateTime(2022, 3, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EndPoint = "123 Le Loi, Minh An Ward, Hoi An City, Quang Nam Province",
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OrderDate = new DateTime(2022, 3, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StartPoint = "123 Le Loi, Minh An Ward, Hoi An City, Quang Nam Province",
                            State = "Confirmed",
                            TourId = 1,
                            TouristEmail = "braddinh1952000@gmail.com",
                            TouristName = "Dinh Cong Tai",
                            TouristPhone = "0945501905",
                            UserId = 3
                        },
                        new
                        {
                            Id = 2,
                            Adults = 2,
                            Children = 0,
                            DepartureDate = new DateTime(2022, 3, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EndPoint = "123 Le Loi, Minh An Ward, Hoi An City, Quang Nam Province",
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OrderDate = new DateTime(2022, 3, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StartPoint = "160 Tran Nhat Duat, Cam Chau, Hoi An&Customer Point",
                            State = "Confirmed",
                            TourId = 2,
                            TouristEmail = "braddinh1952000@gmail.com",
                            TouristName = "Dinh Cong Tai",
                            TouristPhone = "0945501905",
                            UserId = 3
                        });
                });

            modelBuilder.Entity("HappyVacation.Database.Entities.Place", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("IsTop")
                        .HasColumnType("bit");

                    b.Property<string>("PlaceName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("ThumbnailUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Places", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsTop = true,
                            PlaceName = "Da Nang",
                            ThumbnailUrl = "/storage/danang.jpg"
                        },
                        new
                        {
                            Id = 2,
                            IsTop = true,
                            PlaceName = "Hue",
                            ThumbnailUrl = "/storage/hue.jpg"
                        },
                        new
                        {
                            Id = 3,
                            IsTop = true,
                            PlaceName = "Hoi An",
                            ThumbnailUrl = "/storage/hoian.jpg"
                        },
                        new
                        {
                            Id = 4,
                            IsTop = false,
                            PlaceName = "Ha Long",
                            ThumbnailUrl = "/storage/halong.jpg"
                        },
                        new
                        {
                            Id = 5,
                            IsTop = true,
                            PlaceName = "Ha Noi",
                            ThumbnailUrl = "/storage/hanoi.jpg"
                        },
                        new
                        {
                            Id = 6,
                            IsTop = true,
                            PlaceName = "Ho Chi Minh",
                            ThumbnailUrl = "/storage/hochiminh.jpg"
                        },
                        new
                        {
                            Id = 7,
                            IsTop = false,
                            PlaceName = "Da Lat",
                            ThumbnailUrl = "/storage/dalat.jpg"
                        },
                        new
                        {
                            Id = 8,
                            IsTop = true,
                            PlaceName = "Nha Trang",
                            ThumbnailUrl = "/storage/nhatrang.jpg"
                        },
                        new
                        {
                            Id = 9,
                            IsTop = false,
                            PlaceName = "Phu Quoc",
                            ThumbnailUrl = "/storage/phuquoc.jpg"
                        },
                        new
                        {
                            Id = 10,
                            IsTop = false,
                            PlaceName = "Quy Nhon",
                            ThumbnailUrl = "/storage/quynhon.jpg"
                        },
                        new
                        {
                            Id = 11,
                            IsTop = false,
                            PlaceName = "Sa Pa",
                            ThumbnailUrl = "/storage/sapa.jpg"
                        },
                        new
                        {
                            Id = 12,
                            IsTop = false,
                            PlaceName = "Vung Tau",
                            ThumbnailUrl = "/storage/vungtau.jpg"
                        },
                        new
                        {
                            Id = 13,
                            IsTop = false,
                            PlaceName = "Mui Ne",
                            ThumbnailUrl = "/storage/muine.jpg"
                        },
                        new
                        {
                            Id = 14,
                            IsTop = false,
                            PlaceName = "Con Dao",
                            ThumbnailUrl = "/storage/condao.jpg"
                        },
                        new
                        {
                            Id = 15,
                            IsTop = false,
                            PlaceName = "Trang An",
                            ThumbnailUrl = "/storage/trangan.jpg"
                        });
                });

            modelBuilder.Entity("HappyVacation.Database.Entities.Provider", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("AvatarUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("ProviderEmail")
                        .IsRequired()
                        .HasMaxLength(62)
                        .HasColumnType("nvarchar(62)");

                    b.Property<string>("ProviderName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ProviderPhone")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.HasKey("Id");

                    b.ToTable("Providers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "32 Tien Giang St, Tan Binh District, Ho Chi Minh City, Viet Nam",
                            AvatarUrl = "/storage/hoianexpresslogo.jpg",
                            DateCreated = new DateTime(2022, 3, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Established in 2002, Hoi An Express is a company specializing in organizing professional tours for foreign visitors to Vietnam to visit tours, conferences, events combined with team building.",
                            IsEnabled = true,
                            ProviderEmail = "info@hoianexpress.com.vn",
                            ProviderName = "Hoi An Express",
                            ProviderPhone = "0905123456"
                        });
                });

            modelBuilder.Entity("HappyVacation.Database.Entities.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<float>("Rating")
                        .HasColumnType("real");

                    b.Property<int>("TourId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TourId");

                    b.HasIndex("UserId");

                    b.ToTable("Reviews", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Content = "This is a good tour! A lot of interesting experiences.",
                            DateCreated = new DateTime(2022, 3, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateModified = new DateTime(2022, 3, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Rating = 4f,
                            TourId = 1,
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            Content = "I love it! Had a really relaxing time.",
                            DateCreated = new DateTime(2022, 4, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateModified = new DateTime(2022, 4, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Rating = 4f,
                            TourId = 1,
                            UserId = 1
                        });
                });

            modelBuilder.Entity("HappyVacation.Database.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("Roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            RoleName = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            RoleName = "Provider"
                        },
                        new
                        {
                            Id = 3,
                            RoleName = "Tourist"
                        },
                        new
                        {
                            Id = 4,
                            RoleName = "Hotel_Owner"
                        });
                });

            modelBuilder.Entity("HappyVacation.Database.Entities.Tour", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<float>("Duration")
                        .HasColumnType("real");

                    b.Property<string>("EndPoint")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("GroupSize")
                        .HasColumnType("int");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPrivate")
                        .HasColumnType("bit");

                    b.Property<int>("MinAdults")
                        .HasColumnType("int");

                    b.Property<string>("Overview")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PricePerAdult")
                        .HasColumnType("int");

                    b.Property<int>("PricePerChild")
                        .HasColumnType("int");

                    b.Property<int>("ProviderId")
                        .HasColumnType("int");

                    b.Property<string>("StartPoint")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("StartTime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TourName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("ViewCount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProviderId");

                    b.ToTable("Tours", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Duration = 0.5f,
                            EndPoint = "123 Le Loi, Minh An Ward, Hoi An City, Quang Nam Province",
                            GroupSize = 15,
                            IsAvailable = true,
                            IsPrivate = false,
                            MinAdults = 2,
                            Overview = "Take a journey through Hoi An’s culinary history; head out to the beautiful countryside by bicycle to experience some traditional local food favorites, including the most famous of Hoi An specialties; Cao Lau. Try the traditional Hoi An specialty, Cao Lau; intoxicating pork noodle broth, featuring sticky rice noodles that must be soaked in water from the oldest well in Hoi An, Ba Le Well.",
                            PricePerAdult = 89,
                            PricePerChild = 30,
                            ProviderId = 1,
                            StartPoint = "123 Le Loi, Minh An Ward, Hoi An City, Quang Nam Province",
                            StartTime = "8:00 AM",
                            TourName = "HALF-DAY FOODIE TOUR BY BICYCLE & VISIT TRA QUE VEGETABLE VILLAGE",
                            ViewCount = 10
                        },
                        new
                        {
                            Id = 2,
                            Duration = 0.125f,
                            EndPoint = "123 Le Loi, Minh An Ward, Hoi An City, Quang Nam Province",
                            GroupSize = 15,
                            IsAvailable = true,
                            IsPrivate = true,
                            MinAdults = 1,
                            Overview = "Have a memorable end to your day in Hoi An with a tour of the ancient town after the sun goes down. See the centuries-old houses and monuments illuminated by local lanterns. Visit a traditional restaurant for dinner",
                            PricePerAdult = 180,
                            PricePerChild = 50,
                            ProviderId = 1,
                            StartPoint = "123 Le Loi, Minh An Ward, Hoi An City, Quang Nam Province",
                            StartTime = "5:00 PM",
                            TourName = "Private Tour: HOI AN MYSTERIOUS NIGHT TOUR WITH DINNER FROM HOI AN",
                            ViewCount = 5
                        });
                });

            modelBuilder.Entity("HappyVacation.Database.Entities.TourCategory", b =>
                {
                    b.Property<int>("TourId")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.HasKey("TourId", "CategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("TourCategories", (string)null);

                    b.HasData(
                        new
                        {
                            TourId = 1,
                            CategoryId = 4
                        },
                        new
                        {
                            TourId = 1,
                            CategoryId = 7
                        },
                        new
                        {
                            TourId = 1,
                            CategoryId = 8
                        },
                        new
                        {
                            TourId = 1,
                            CategoryId = 11
                        },
                        new
                        {
                            TourId = 2,
                            CategoryId = 11
                        },
                        new
                        {
                            TourId = 2,
                            CategoryId = 12
                        });
                });

            modelBuilder.Entity("HappyVacation.Database.Entities.TourImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("TourId")
                        .HasColumnType("int");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("TourId");

                    b.ToTable("TourImages", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            TourId = 1,
                            Url = "/storage/tour11.jpg"
                        },
                        new
                        {
                            Id = 2,
                            TourId = 1,
                            Url = "/storage/tour12.jpg"
                        },
                        new
                        {
                            Id = 3,
                            TourId = 1,
                            Url = "/storage/tour13.jpg"
                        },
                        new
                        {
                            Id = 4,
                            TourId = 1,
                            Url = "/storage/tour14.jpg"
                        },
                        new
                        {
                            Id = 5,
                            TourId = 2,
                            Url = "/storage/tour21.jpg"
                        },
                        new
                        {
                            Id = 6,
                            TourId = 2,
                            Url = "/storage/tour22.jpg"
                        },
                        new
                        {
                            Id = 7,
                            TourId = 2,
                            Url = "/storage/tour23.jpg"
                        },
                        new
                        {
                            Id = 8,
                            TourId = 2,
                            Url = "/storage/tour24.jpg"
                        });
                });

            modelBuilder.Entity("HappyVacation.Database.Entities.TourPlace", b =>
                {
                    b.Property<int>("TourId")
                        .HasColumnType("int");

                    b.Property<int>("PlaceId")
                        .HasColumnType("int");

                    b.HasKey("TourId", "PlaceId");

                    b.HasIndex("PlaceId");

                    b.ToTable("TourPlaces", (string)null);

                    b.HasData(
                        new
                        {
                            TourId = 1,
                            PlaceId = 3
                        },
                        new
                        {
                            TourId = 2,
                            PlaceId = 3
                        });
                });

            modelBuilder.Entity("HappyVacation.Database.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AvatarUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(62)
                        .HasColumnType("nvarchar(62)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int?>("HotelId")
                        .HasColumnType("int");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<int?>("ProviderId")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.HasIndex("HotelId")
                        .IsUnique()
                        .HasFilter("[HotelId] IS NOT NULL");

                    b.HasIndex("ProviderId")
                        .IsUnique()
                        .HasFilter("[ProviderId] IS NOT NULL");

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "ngoluuquocdat@gmail.com",
                            FirstName = "Quoc Dat",
                            IsEnabled = true,
                            LastName = "Ngo Luu",
                            PasswordHash = new byte[] { 194, 71, 196, 112, 236, 71, 244, 124, 139, 9, 154, 178, 134, 175, 5, 166, 179, 100, 24, 148, 161, 249, 118, 166, 250, 145, 7, 2, 147, 37, 141, 55, 215, 250, 222, 14, 193, 50, 9, 167, 168, 121, 237, 88, 93, 114, 75, 18, 77, 200, 34, 69, 95, 229, 125, 90, 113, 61, 173, 171, 40, 229, 252, 124 },
                            PasswordSalt = new byte[] { 96, 46, 33, 235, 31, 36, 22, 240, 229, 215, 169, 88, 77, 1, 133, 111, 183, 255, 37, 177, 220, 190, 201, 43, 164, 160, 217, 192, 64, 12, 37, 152, 124, 119, 51, 6, 38, 113, 93, 9, 18, 239, 185, 3, 61, 111, 152, 87, 173, 63, 179, 148, 166, 178, 232, 65, 165, 68, 149, 195, 235, 216, 221, 86, 80, 238, 58, 103, 243, 25, 108, 6, 230, 122, 9, 141, 68, 125, 166, 124, 44, 82, 46, 68, 177, 67, 147, 201, 55, 6, 147, 122, 133, 109, 208, 133, 12, 107, 178, 234, 19, 208, 69, 145, 106, 146, 190, 206, 66, 80, 164, 11, 70, 154, 141, 125, 34, 216, 145, 226, 127, 218, 15, 134, 183, 148, 28, 250 },
                            Phone = "0905553859",
                            Username = "admin"
                        },
                        new
                        {
                            Id = 2,
                            AvatarUrl = "/storage/tuan.jpg",
                            Email = "tuandang29042000@gmail.com",
                            FirstName = "Quoc Tuan",
                            IsEnabled = true,
                            LastName = "Dang",
                            PasswordHash = new byte[] { 219, 245, 78, 213, 144, 77, 234, 88, 25, 238, 252, 64, 95, 219, 105, 28, 108, 208, 35, 4, 180, 203, 113, 76, 218, 100, 180, 46, 171, 13, 124, 4, 26, 52, 222, 215, 152, 50, 193, 138, 251, 3, 203, 198, 122, 42, 46, 154, 158, 205, 161, 243, 81, 131, 228, 59, 201, 143, 35, 136, 17, 30, 62, 94 },
                            PasswordSalt = new byte[] { 96, 46, 33, 235, 31, 36, 22, 240, 229, 215, 169, 88, 77, 1, 133, 111, 183, 255, 37, 177, 220, 190, 201, 43, 164, 160, 217, 192, 64, 12, 37, 152, 124, 119, 51, 6, 38, 113, 93, 9, 18, 239, 185, 3, 61, 111, 152, 87, 173, 63, 179, 148, 166, 178, 232, 65, 165, 68, 149, 195, 235, 216, 221, 86, 80, 238, 58, 103, 243, 25, 108, 6, 230, 122, 9, 141, 68, 125, 166, 124, 44, 82, 46, 68, 177, 67, 147, 201, 55, 6, 147, 122, 133, 109, 208, 133, 12, 107, 178, 234, 19, 208, 69, 145, 106, 146, 190, 206, 66, 80, 164, 11, 70, 154, 141, 125, 34, 216, 145, 226, 127, 218, 15, 134, 183, 148, 28, 250 },
                            Phone = "0921231220",
                            ProviderId = 1,
                            Username = "quoctuan"
                        },
                        new
                        {
                            Id = 3,
                            AvatarUrl = "/storage/tai.jpg",
                            Email = "braddinh1952000@gmail.com",
                            FirstName = "Cong Tai",
                            IsEnabled = true,
                            LastName = "Dinh",
                            PasswordHash = new byte[] { 180, 42, 193, 25, 43, 118, 228, 6, 238, 48, 151, 8, 240, 92, 4, 175, 246, 197, 65, 140, 79, 234, 32, 77, 31, 97, 92, 15, 116, 35, 224, 7, 64, 223, 177, 178, 247, 137, 4, 3, 197, 19, 197, 31, 23, 155, 158, 65, 27, 91, 77, 130, 179, 146, 110, 247, 9, 123, 210, 118, 44, 13, 39, 151 },
                            PasswordSalt = new byte[] { 96, 46, 33, 235, 31, 36, 22, 240, 229, 215, 169, 88, 77, 1, 133, 111, 183, 255, 37, 177, 220, 190, 201, 43, 164, 160, 217, 192, 64, 12, 37, 152, 124, 119, 51, 6, 38, 113, 93, 9, 18, 239, 185, 3, 61, 111, 152, 87, 173, 63, 179, 148, 166, 178, 232, 65, 165, 68, 149, 195, 235, 216, 221, 86, 80, 238, 58, 103, 243, 25, 108, 6, 230, 122, 9, 141, 68, 125, 166, 124, 44, 82, 46, 68, 177, 67, 147, 201, 55, 6, 147, 122, 133, 109, 208, 133, 12, 107, 178, 234, 19, 208, 69, 145, 106, 146, 190, 206, 66, 80, 164, 11, 70, 154, 141, 125, 34, 216, 145, 226, 127, 218, 15, 134, 183, 148, 28, 250 },
                            Phone = "0945501905",
                            Username = "congtai"
                        },
                        new
                        {
                            Id = 4,
                            AvatarUrl = "/storage/dat.jpg",
                            Email = "ngoluuquocdat@gmail.com",
                            FirstName = "Quoc Dat",
                            IsEnabled = true,
                            LastName = "Ngo Luu",
                            PasswordHash = new byte[] { 138, 74, 3, 35, 17, 164, 234, 211, 7, 178, 58, 137, 104, 247, 160, 149, 180, 234, 204, 128, 115, 29, 204, 233, 214, 254, 160, 68, 79, 187, 50, 69, 2, 163, 238, 92, 17, 109, 198, 165, 182, 187, 185, 40, 73, 101, 203, 159, 223, 34, 190, 53, 197, 71, 190, 199, 110, 126, 152, 197, 14, 47, 194, 146 },
                            PasswordSalt = new byte[] { 96, 46, 33, 235, 31, 36, 22, 240, 229, 215, 169, 88, 77, 1, 133, 111, 183, 255, 37, 177, 220, 190, 201, 43, 164, 160, 217, 192, 64, 12, 37, 152, 124, 119, 51, 6, 38, 113, 93, 9, 18, 239, 185, 3, 61, 111, 152, 87, 173, 63, 179, 148, 166, 178, 232, 65, 165, 68, 149, 195, 235, 216, 221, 86, 80, 238, 58, 103, 243, 25, 108, 6, 230, 122, 9, 141, 68, 125, 166, 124, 44, 82, 46, 68, 177, 67, 147, 201, 55, 6, 147, 122, 133, 109, 208, 133, 12, 107, 178, 234, 19, 208, 69, 145, 106, 146, 190, 206, 66, 80, 164, 11, 70, 154, 141, 125, 34, 216, 145, 226, 127, 218, 15, 134, 183, 148, 28, 250 },
                            Phone = "0905553859",
                            Username = "quocdat"
                        },
                        new
                        {
                            Id = 8,
                            AvatarUrl = "/storage/duy.jpg",
                            Email = "duylam2906@gmail.com",
                            FirstName = "Thai Duy",
                            HotelId = 1,
                            IsEnabled = true,
                            LastName = "Lam",
                            PasswordHash = new byte[] { 28, 76, 206, 33, 141, 107, 154, 132, 77, 27, 163, 31, 222, 104, 218, 194, 88, 203, 236, 86, 24, 141, 154, 6, 234, 222, 146, 48, 165, 16, 174, 69, 84, 227, 104, 49, 127, 231, 23, 117, 70, 138, 212, 234, 163, 205, 246, 248, 123, 22, 116, 78, 94, 69, 192, 96, 13, 214, 132, 42, 226, 53, 225, 243 },
                            PasswordSalt = new byte[] { 96, 46, 33, 235, 31, 36, 22, 240, 229, 215, 169, 88, 77, 1, 133, 111, 183, 255, 37, 177, 220, 190, 201, 43, 164, 160, 217, 192, 64, 12, 37, 152, 124, 119, 51, 6, 38, 113, 93, 9, 18, 239, 185, 3, 61, 111, 152, 87, 173, 63, 179, 148, 166, 178, 232, 65, 165, 68, 149, 195, 235, 216, 221, 86, 80, 238, 58, 103, 243, 25, 108, 6, 230, 122, 9, 141, 68, 125, 166, 124, 44, 82, 46, 68, 177, 67, 147, 201, 55, 6, 147, 122, 133, 109, 208, 133, 12, 107, 178, 234, 19, 208, 69, 145, 106, 146, 190, 206, 66, 80, 164, 11, 70, 154, 141, 125, 34, 216, 145, 226, 127, 218, 15, 134, 183, 148, 28, 250 },
                            Phone = "0764132745",
                            Username = "thaiduy"
                        },
                        new
                        {
                            Id = 9,
                            AvatarUrl = "/storage/toan.jpg",
                            Email = "xuantoan2401@gmail.com",
                            FirstName = "Xuan Toan",
                            HotelId = 2,
                            IsEnabled = true,
                            LastName = "Mai",
                            PasswordHash = new byte[] { 218, 109, 166, 29, 64, 218, 246, 42, 142, 112, 36, 250, 165, 14, 128, 72, 244, 207, 174, 119, 102, 92, 227, 82, 68, 139, 32, 189, 5, 0, 105, 71, 139, 37, 31, 130, 59, 192, 77, 240, 93, 227, 62, 103, 40, 129, 95, 150, 134, 178, 157, 216, 17, 101, 3, 95, 82, 106, 222, 199, 231, 247, 1, 171 },
                            PasswordSalt = new byte[] { 96, 46, 33, 235, 31, 36, 22, 240, 229, 215, 169, 88, 77, 1, 133, 111, 183, 255, 37, 177, 220, 190, 201, 43, 164, 160, 217, 192, 64, 12, 37, 152, 124, 119, 51, 6, 38, 113, 93, 9, 18, 239, 185, 3, 61, 111, 152, 87, 173, 63, 179, 148, 166, 178, 232, 65, 165, 68, 149, 195, 235, 216, 221, 86, 80, 238, 58, 103, 243, 25, 108, 6, 230, 122, 9, 141, 68, 125, 166, 124, 44, 82, 46, 68, 177, 67, 147, 201, 55, 6, 147, 122, 133, 109, 208, 133, 12, 107, 178, 234, 19, 208, 69, 145, 106, 146, 190, 206, 66, 80, 164, 11, 70, 154, 141, 125, 34, 216, 145, 226, 127, 218, 15, 134, 183, 148, 28, 250 },
                            Phone = "0783803087",
                            Username = "xuantoan"
                        });
                });

            modelBuilder.Entity("HappyVacation.Database.Entities.UserRole", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 1,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 1,
                            RoleId = 3
                        },
                        new
                        {
                            UserId = 2,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 2,
                            RoleId = 3
                        },
                        new
                        {
                            UserId = 3,
                            RoleId = 3
                        },
                        new
                        {
                            UserId = 4,
                            RoleId = 3
                        },
                        new
                        {
                            UserId = 8,
                            RoleId = 3
                        },
                        new
                        {
                            UserId = 8,
                            RoleId = 4
                        },
                        new
                        {
                            UserId = 9,
                            RoleId = 3
                        },
                        new
                        {
                            UserId = 9,
                            RoleId = 4
                        });
                });

            modelBuilder.Entity("HappyVacation.Database.Entities.Expense", b =>
                {
                    b.HasOne("HappyVacation.Database.Entities.Tour", "Tour")
                        .WithMany("Expenses")
                        .HasForeignKey("TourId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tour");
                });

            modelBuilder.Entity("HappyVacation.Database.Entities.HotelBooking.Booking", b =>
                {
                    b.HasOne("HappyVacation.Database.Entities.HotelBooking.Hotel", "Hotel")
                        .WithMany("Bookings")
                        .HasForeignKey("HotelId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("HappyVacation.Database.Entities.User", "User")
                        .WithMany("Bookings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Hotel");

                    b.Navigation("User");
                });

            modelBuilder.Entity("HappyVacation.Database.Entities.HotelBooking.BookingDetail", b =>
                {
                    b.HasOne("HappyVacation.Database.Entities.HotelBooking.Booking", "Booking")
                        .WithMany("BookingDetails")
                        .HasForeignKey("BookingId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("HappyVacation.Database.Entities.HotelBooking.Room", "Room")
                        .WithMany("BookingDetails")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Booking");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("HappyVacation.Database.Entities.HotelBooking.Hotel", b =>
                {
                    b.HasOne("HappyVacation.Database.Entities.Place", "Place")
                        .WithMany("Hotels")
                        .HasForeignKey("PlaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Place");
                });

            modelBuilder.Entity("HappyVacation.Database.Entities.HotelBooking.Room", b =>
                {
                    b.HasOne("HappyVacation.Database.Entities.HotelBooking.Hotel", "Hotel")
                        .WithMany("Rooms")
                        .HasForeignKey("HotelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Hotel");
                });

            modelBuilder.Entity("HappyVacation.Database.Entities.Itinerary", b =>
                {
                    b.HasOne("HappyVacation.Database.Entities.Tour", "Tour")
                        .WithMany("Itineraries")
                        .HasForeignKey("TourId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tour");
                });

            modelBuilder.Entity("HappyVacation.Database.Entities.Order", b =>
                {
                    b.HasOne("HappyVacation.Database.Entities.Tour", "Tour")
                        .WithMany("Orders")
                        .HasForeignKey("TourId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("HappyVacation.Database.Entities.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Tour");

                    b.Navigation("User");
                });

            modelBuilder.Entity("HappyVacation.Database.Entities.Review", b =>
                {
                    b.HasOne("HappyVacation.Database.Entities.Tour", "Tour")
                        .WithMany("Reviews")
                        .HasForeignKey("TourId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HappyVacation.Database.Entities.User", "User")
                        .WithMany("Reviews")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Tour");

                    b.Navigation("User");
                });

            modelBuilder.Entity("HappyVacation.Database.Entities.Tour", b =>
                {
                    b.HasOne("HappyVacation.Database.Entities.Provider", "Provider")
                        .WithMany("Tours")
                        .HasForeignKey("ProviderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Provider");
                });

            modelBuilder.Entity("HappyVacation.Database.Entities.TourCategory", b =>
                {
                    b.HasOne("HappyVacation.Database.Entities.Category", "Category")
                        .WithMany("TourCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HappyVacation.Database.Entities.Tour", "Tour")
                        .WithMany("TourCategories")
                        .HasForeignKey("TourId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Tour");
                });

            modelBuilder.Entity("HappyVacation.Database.Entities.TourImage", b =>
                {
                    b.HasOne("HappyVacation.Database.Entities.Tour", "Tour")
                        .WithMany("TourImages")
                        .HasForeignKey("TourId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tour");
                });

            modelBuilder.Entity("HappyVacation.Database.Entities.TourPlace", b =>
                {
                    b.HasOne("HappyVacation.Database.Entities.Place", "Place")
                        .WithMany("TourPlaces")
                        .HasForeignKey("PlaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HappyVacation.Database.Entities.Tour", "Tour")
                        .WithMany("TourPlaces")
                        .HasForeignKey("TourId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Place");

                    b.Navigation("Tour");
                });

            modelBuilder.Entity("HappyVacation.Database.Entities.User", b =>
                {
                    b.HasOne("HappyVacation.Database.Entities.HotelBooking.Hotel", "Hotel")
                        .WithOne("User")
                        .HasForeignKey("HappyVacation.Database.Entities.User", "HotelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HappyVacation.Database.Entities.Provider", "Provider")
                        .WithOne("User")
                        .HasForeignKey("HappyVacation.Database.Entities.User", "ProviderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Hotel");

                    b.Navigation("Provider");
                });

            modelBuilder.Entity("HappyVacation.Database.Entities.UserRole", b =>
                {
                    b.HasOne("HappyVacation.Database.Entities.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HappyVacation.Database.Entities.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("HappyVacation.Database.Entities.Category", b =>
                {
                    b.Navigation("TourCategories");
                });

            modelBuilder.Entity("HappyVacation.Database.Entities.HotelBooking.Booking", b =>
                {
                    b.Navigation("BookingDetails");
                });

            modelBuilder.Entity("HappyVacation.Database.Entities.HotelBooking.Hotel", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("Rooms");

                    b.Navigation("User")
                        .IsRequired();
                });

            modelBuilder.Entity("HappyVacation.Database.Entities.HotelBooking.Room", b =>
                {
                    b.Navigation("BookingDetails");
                });

            modelBuilder.Entity("HappyVacation.Database.Entities.Place", b =>
                {
                    b.Navigation("Hotels");

                    b.Navigation("TourPlaces");
                });

            modelBuilder.Entity("HappyVacation.Database.Entities.Provider", b =>
                {
                    b.Navigation("Tours");

                    b.Navigation("User")
                        .IsRequired();
                });

            modelBuilder.Entity("HappyVacation.Database.Entities.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("HappyVacation.Database.Entities.Tour", b =>
                {
                    b.Navigation("Expenses");

                    b.Navigation("Itineraries");

                    b.Navigation("Orders");

                    b.Navigation("Reviews");

                    b.Navigation("TourCategories");

                    b.Navigation("TourImages");

                    b.Navigation("TourPlaces");
                });

            modelBuilder.Entity("HappyVacation.Database.Entities.User", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("Orders");

                    b.Navigation("Reviews");

                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
